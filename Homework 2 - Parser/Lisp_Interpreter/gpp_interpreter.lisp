(defun readfile (filename)
	(setq ListOfToken nil) 
	(setq ResultOfParser nil)
	(with-open-file (file-stream filename) 
	(when file-stream
	(loop for line = (read-line file-stream nil) while line do 
        (setq ResultOfParser (parser (lexer (concatenate 'string line " "))))
        (when (not (equal ResultOfParser "error"))(print "Valid")(format t "Result:~A~%~%" ResultOfParser)(princ "------------------------------------")(terpri)))
	(close file-stream))))
(defun REPLmode ()
    (setq strInput nil)
    (setq ResultOfParser nil)
    (setq ListOfToken nil)
    (loop while (string/= strInput " ") do
        (setq strInput (concatenate 'string (read-line) " "))
    	(when (not(equal strInput " "))
        (setq ResultOfParser (parser (lexer strInput)))
        (when (not (equal ResultOfParser "error")) (print "Valid.") (format t "Result:~A~%~%" ResultOfParser) (princ "------------------------------------")(terpri) ))))
(defun lexer(strnp)
    (setq totalList nil) 
    (setq ListOfChar nil) 
    (setq ListOfToken nil) 
    (setq counts 0) 
    (setq FlagForParathesis nil) 
    (setq FlagForMult nil) 
    (setq FlagForId nil) 
    (setq ListOfDigits '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)) 
    (setq ListOfLetter '(#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z #\.))
    (loop for i from 0 to (- (length strnp) 1) do
    (setq FlagForId nil)
    (setq FlagForMult nil)
    (loop while (and (or (string= (char strnp i) #\Space) 
    			  	 	 (string= (char strnp i) #\newline) 
    			  	 	 (string= (char strnp i) #\tab)) 
    				 (< i (- (length strnp) 1))) do (incf i))
    (when (> (- (length strnp) 1) (+ i 1))
        (when (string= (subseq strnp i (+ i 2)) ";;") (setq FlagForId t)
            (setq totalList(append totalList (list ListOfChar))) (setq totalList(append totalList (list ListOfToken)))
            (return-from lexer totalList)))
    (when (> (- (length strnp) 1) (+ i 1))
        (when (string= (subseq strnp i (+ i 2)) "or")(setq flag t)
            (when (> (- (length strnp) 1) (+ i 2)) 
                (if (and (not (member (char strnp (+ i 2)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 2)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list OR)))(setq ListOfChar (append ListOfChar (list "or")))
                (setq FlagForId t)
                (incf i))))
    (when (> (- (length strnp) 1) (+ i 1))
        (when (string= (subseq strnp i (+ i 2)) "if")(setq flag t)
            (when (> (- (length strnp) 1) (+ i 2)) 
                (if (and (not (member (char strnp (+ i 2)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 2)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list IF)))(setq ListOfChar (append ListOfChar (list "if")))
                (setq FlagForId t)
                (incf i))))
    (when (> (- (length strnp) 1)(+ i 1))
        (when (string= (subseq strnp i (+ i 2)) "**")
            (setq ListOfToken (append ListOfToken (list DBLMULT)))(setq ListOfChar (append ListOfChar (list "**")))
            (setq FlagForId t)
            (setq FlagForMult t)
            (incf i)))
    (when (> (- (length strnp) 1)(+ i 1) )
        (when (string= (subseq strnp i (+ i 2)) "'(")
            (setq ListOfToken (append ListOfToken (list LISTOP)))(setq ListOfChar (append ListOfChar (list "'(")))
            (setq FlagForId t)
            (setq FlagForParathesis t)
            (incf i)))
    (when (>  (- (length strnp) 1)(+ i 2))
        (when (string= (subseq strnp i (+ i 3)) "and")(setq flag t)
            (when (> (- (length strnp) 1)(+ i 3) ) 
                (if (and (not (member (char strnp (+ i 3)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 3)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list AND))) (setq ListOfChar (append ListOfChar (list "and")))
                (setq FlagForId t)
                (incf i 2))))
    (when (>  (- (length strnp) 1)(+ i 2))
        (when (string= (subseq strnp i (+ i 3)) "not")(setq flag t)
            (when (> (- (length strnp) 1) (+ i 3)) 
                (if (and (not (member (char strnp (+ i 3)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 3)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list NOT)))(setq ListOfChar (append ListOfChar (list "not")))
                (setq FlagForId t)
                (incf i 2))))
    (when (> (- (length strnp) 1)(+ i 2))
        (when (string= (subseq strnp i (+ i 3)) "nil")(setq flag t)
            (when (>  (- (length strnp) 1)(+ i 3)) 
                (if (and (not (member (char strnp (+ i 3)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 3)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list NL)))(setq ListOfChar (append ListOfChar (list "nil")))
                (setq FlagForId t)
                (incf i 2))))
    (when (> (- (length strnp) 1) (+ i 2))
        (when (string= (subseq strnp i (+ i 3)) "set")(setq flag t)
            (when (> (- (length strnp) 1) (+ i 3)) 
                (if (and (not (member (char strnp (+ i 3)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 3)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list SET)))(setq ListOfChar (append ListOfChar (list "set")))
                (setq FlagForId t)
                (incf i 2))))
    (when (> (- (length strnp) 1)(+ i 3))
        (when (string= (subseq strnp i (+ i 4)) "less")(setq flag t)
            (when (> (- (length strnp) 1)(+ i 4)) 
                (if (and (not (member (char strnp (+ i 4)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 4)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list LESS)))(setq ListOfChar (append ListOfChar (list "less")))
                (setq FlagForId t)
                (incf i 3))))
    (when (> (- (length strnp) 1)(+ i 3)) 
        (when (string= (subseq strnp i (+ i 4)) "list")(setq flag t)
            (when (>  (- (length strnp) 1)(+ i 4)) 
                (if (and (not (member (char strnp (+ i 4)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 4)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list LIST)))(setq ListOfChar (append ListOfChar (list "list")))
                (setq FlagForId t)
                (incf i 3))))
    (when (> (- (length strnp) 1) (+ i 3))
        (when (string= (subseq strnp i (+ i 4)) "load")(setq flag t)
            (when (> (- (length strnp) 1) (+ i 4)) 
                (if (and (not (member (char strnp (+ i 4)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 4)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list LOAD)))(setq ListOfChar (append ListOfChar (list "load")))
                (setq FlagForId t)
                (incf i 3))))
    (when (>  (- (length strnp) 1)(+ i 3))
        (when (string= (subseq strnp i (+ i 4)) "exit")(setq flag t)
            (when (> (- (length strnp) 1)(+ i 4)) 
                (if (and (not (member (char strnp (+ i 4)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 4)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list EXIT))) (setq ListOfChar (append ListOfChar (list "exit")))
                (setq FlagForId t)
                (incf i 3))))
    (when (> (- (length strnp) 1)(+ i 3) )
        (when (string= (subseq strnp i (+ i 4)) "disp")(setq flag t)
            (when (> (- (length strnp) 1) (+ i 4)) 
                (if (and (not (member (char strnp (+ i 4)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 4)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list DISP))) (setq ListOfChar (append ListOfChar (list "disp")))
                (setq FlagForId t)
                (incf i 3))))
    (when (> (- (length strnp) 1) (+ i 4))
        (when (string= (subseq strnp i (+ i 5)) "equal")(setq flag t)
            (when (>  (- (length strnp) 1)(+ i 5)) 
                (if (and (not (member (char strnp (+ i 5)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 5)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list EQUAL)))(setq ListOfChar (append ListOfChar (list "equal")))
                (setq FlagForId t)
                (incf i 4))))
    (when (> (- (length strnp) 1)(+ i 3) )
        (when (string= (subseq strnp i (+ i 4)) "true")(setq flag t)
            (when (> (- (length strnp) 1) (+ i 4)) 
                (if (and (not (member (char strnp (+ i 4)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 4)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list TRUE)))(setq ListOfChar (append ListOfChar (list "true")))
                (setq FlagForId t)
                (incf i 3))))
    (when (>  (- (length strnp) 1)(+ i 4))
        (when (string= (subseq strnp i (+ i 5)) "false")(setq flag t)
            (when (> (- (length strnp) 1)(+ i 5) ) 
                (if (and (not (member (char strnp (+ i 5)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 5)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list FALSE)))(setq ListOfChar (append ListOfChar (list "false")))
                (setq FlagForId t)
                (incf i 4))))
    (when (> (- (length strnp) 1)(+ i 4))
        (when (string= (subseq strnp i (+ i 5)) "while")(setq flag t)
            (when (> (- (length strnp) 1)(+ i 5) ) 
                (if (and (not (member (char strnp (+ i 5)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 5)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list WHILE)))(setq ListOfChar (append ListOfChar (list "while")))
                (setq FlagForId t)
                (incf i 4))))
    (when (> (- (length strnp) 1)(+ i 2) )
        (when (string= (subseq strnp i (+ i 3)) "for")(setq flag t)
            (when (> (- (length strnp) 1) (+ i 3)) 
                (if (and (not (member (char strnp (+ i 3)) ListOfDigits))
                		 (not (member (char strnp (+ i 3)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list FOR)))(setq ListOfChar (append ListOfChar (list "for")))
                (setq FlagForId t)
                (incf i 2))))
    (when (>  (- (length strnp) 1)(+ i 5))
        (when (string= (subseq strnp i (+ i 6)) "append")(setq flag t)
            (when (> (- (length strnp) 1)(+ i 6) ) 
                (if (and (not (member (char strnp (+ i 6)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 6)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list APPEND))) (setq ListOfChar (append ListOfChar (list "append")))
                (setq FlagForId t)
                (incf i 5))))
    (when (> (- (length strnp) 1) (+ i 5))
        (when (string= (subseq strnp i (+ i 6)) "concat")(setq flag t)
            (when (>  (- (length strnp) 1)(+ i 6)) 
                (if (and (not (member (char strnp (+ i 6)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 6)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list CONCAT)))(setq ListOfChar (append ListOfChar (list "concat")))
                (setq FlagForId t)
                (incf i 5))))
    (when (>  (- (length strnp) 1)(+ i 5))
        (when (equal (subseq strnp i (+ i 6)) "deffun")(setq flag t)
            (when (>(- (length strnp) 1) (+ i 6) ) 
                (if (and (not (member (char strnp (+ i 6)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 6)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list DEFFUN))) (setq ListOfChar (append ListOfChar (list "deffun")))
                (setq FlagForId t)
                (incf i 5))))
    (when (>  (- (length strnp) 1)(+ i 5))
        (when (equal (subseq strnp i (+ i 6)) "defvar")(setq flag t)
            (when (> (- (length strnp) 1) (+ i 6)) 
                (if (and (not (member (char strnp (+ i 6)) ListOfDigits)) 
                		 (not (member (char strnp (+ i 6)) ListOfLetter)))
                    (setq flag t)
                    (setq flag nil)))
            (when (eq flag t)
                (setq ListOfToken (append ListOfToken (list DEFVAR))) (setq ListOfChar (append ListOfChar (list "defvar")))
                (setq FlagForId t)
                (incf i 5))))
    (if (string= (subseq strnp i (+ i 1)) "+")
        (progn (setq FlagForId t)
       	(setq ListOfToken (append ListOfToken (list PLUS)))(setq ListOfChar (append ListOfChar (list "+")))))
    (if (string= (subseq strnp i (+ i 1)) "-")
        (progn (setq FlagForId t)
        (setq ListOfToken (append ListOfToken (list MINUS)))(setq ListOfChar (append ListOfChar (list "-")))))
    (if (string= (subseq strnp i (+ i 1)) ")")
        (progn (setq FlagForId t)
        (setq ListOfToken (append ListOfToken (list CP)))
        (setq ListOfChar (append ListOfChar (list ")")))))
    (if (string= (subseq strnp i (+ i 1)) "/")
        (progn (setq FlagForId t)
        (setq ListOfToken (append ListOfToken (list DIV)))(setq ListOfChar (append ListOfChar (list "/")))))
    (if (string= (subseq strnp i (+ i 1)) "\"")
    	(progn (setq FlagForId t)
        (if (eq (mod counts 2) 0)
            (progn (setq ListOfToken (append ListOfToken (list OC))) (setq ListOfChar (append ListOfChar (list "\"")))) 
            (progn (setq ListOfToken (append ListOfToken (list CC))) (setq ListOfChar (append ListOfChar (list "\"")))))(incf counts)))
    (if (string= (subseq strnp i (+ i 1)) ",")
    	(progn (setq FlagForId t)
        (setq ListOfToken (append ListOfToken (list COMMA)))
        (setq ListOfChar (append ListOfChar (list ",")))))
    (if (not(or (string/= (subseq strnp i (+ i 1)) "*") 
    		    (string/= FlagForMult nil)))
        (progn (setq FlagForId t)
        (setq ListOfToken (append ListOfToken (list MULT)))(setq ListOfChar (append ListOfChar (list "*")))))
    (if (not(or (string/= (subseq strnp i (+ i 1)) "(") 
    		    (string/= FlagForParathesis nil)))
    	(progn (setq FlagForId t)
        (setq ListOfToken (append ListOfToken (list OP)))(setq ListOfChar (append ListOfChar (list "(")))))
    (when (member (char strnp i) ListOfDigits)
        (when (> (- (length strnp) 1)(+ i 1))
            (when (and (string= (char strnp i) #\0) 
            		   (not (member (char strnp (+ i 1)) ListOfDigits)))
                (setq ListOfToken (append ListOfToken (list VALUE)))
                (setq ListOfChar (append ListOfChar (list "0")))
                (setq FlagForId t)))
        (when (and (eq i (- (length strnp) 1)) 
        		   (string= (char strnp i) #\0))
            (setq ListOfToken (append ListOfToken (list VALUE)))
            (setq ListOfChar (append ListOfChar (list "0")))
            (setq FlagForId t))
        (setq strVal "")
        (when (string/= (char strnp i) #\0)
            (loop while (and (member (char strnp i) ListOfDigits) 
            				 (> (- (length strnp) 1) i) )do
                (setq strVal (concatenate 'string strVal (string (char strnp i))))
                (incf i))
            (setq ListOfToken (append ListOfToken (list VALUE)))(setq ListOfChar (append ListOfChar (list strVal)))
            (setq FlagForId t)
            (decf i)))
    (setq idString "")
    (when (and 	(string= FlagForId nil) 
    			(member (char-downcase (char strnp i)) ListOfLetter))
        (loop while (and (or (member (char-downcase (char strnp i)) ListOfLetter) 
        					 (member (char strnp i) ListOfDigits)) 
        				 (> (- (length strnp) 1)i)) do
        	(setq conc (concatenate 'string idString (string (char strnp i))))
            (setq idString conc)
            (incf i))
        (setq ListOfToken (append ListOfToken (list IDENTIFIER)))
        (setq ListOfChar (append ListOfChar (list idString)))
        (setq FlagForId t)   
        (decf i))
    (when (and  (string= FlagForId nil)
    			(string/= (char strnp i) #\Space) 
    			(string/= (char strnp i) #\newline) 
    			(string/= (char strnp i) #\tab))
        (print "SYNTAX_ERROR")(princ "------------------------------------")(terpri) 
        (return-from lexer)));(exit)	 if wants to finish the program
    (setq totalList(append totalList (list ListOfChar)))
    (setq totalList(append totalList (list ListOfToken)))
    totalList
)

(defun parser(ListOfToken)
    (let 
    ((result nil) 
    (errorFlag t) 
    (chars (nth 0 ListOfToken)) 
    (strToken (nth 1 ListOfToken)))
    (when (not (paranthesisChecker chars))(print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error"))
    (when (or (equal chars nil) (equal strToken nil))(return-from parser t))
    (when (equal (length strToken) 1)
        (when (or (string= (nth 0 strToken) "VALUE") 
        		  (string= (nth 0 strToken) "KW_NIL") 
        		  (string= (nth 0 strToken) "KW_FALSE") 
        		  (string= (nth 0 strToken) "KW_TRUE") 
        		  (string= (nth 0 strToken) "IDENTIFIER"))
            (when (string= (nth 0 strToken) "VALUE")(setq result (nth 0 chars)))
            (when (or (string= (nth 0 strToken) "KW_NIL") (string= (nth 0 strToken) "KW_FALSE"))(setq result nil))
            (when (string= (nth 0 strToken) "KW_TRUE")(setq result t))
            (when (string= (nth 0 strToken) "IDENTIFIER")(setq result (string-upcase (nth 0 chars) )))
            (setq errorFlag nil)))
    (setq numStr nil) 
    (setq SyntxErr t)
    (when (and (string= (nth 0 strToken) "OP_OP") 
		  ( or (string= (nth 1 strToken) "KW_DEFVAR") 
		   	   (string= (nth 1 strToken) "KW_SET")))
        (setq errorFlag nil)
        (when (string= (nth 2 strToken) "IDENTIFIER")(setq SyntxErr nil)(setq numStr (concatenate 'string numStr (nth 2 chars))))
        (when SyntxErr(print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error"))
        (setq SyntxErr t)
        (when (or (string= (nth 3 strToken) "OP_OP") 
        		  (string= (nth 3 strToken) "VALUE"))
            (if (string/= (nth 3 strToken) "VALUE")
                (progn 
            	(setq i 3)
            	(setq totalList nil)
            	(setq counter 1)
            	(setq comeFromParser nil)
                (loop while (not (equal counter 0)) do (incf i)
                    (if (string/= (nth i strToken) "OP_OP")
                        (when (equal (nth i strToken) "OP_CP")(decf counter))
                        (incf counter)))
                (setq lst (list (subseq chars 3 (+ i 1))))
                (setq totalList(append totalList lst))
                (setq lst (list (subseq strToken 3 (+ i 1))))
                (setq totalList(append totalList lst))
                (setq comeFromParser (parser totalList))
                (if (not(integerp comeFromParser))
                	(setq SyntxErr t)
                    (setq SyntxErr nil))
                (if (not SyntxErr) 
                    (setq numStr comeFromParser)
                	(progn
                    (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                    (return-from parser "error"))))
            (setq numStr (nth 3 chars)))
        (setq SyntxErr nil))
        (when (eq SyntxErr t) (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error"))
        (setq result numStr))   
    (let 
    ((numSum 0) 
    (SyntxErr t))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "OP_PLUS"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1) do
            (setq SyntxErr t)
            (when (string= (nth i strToken) "VALUE")(setq numSum (+ numSum (parse-integer (nth i chars))))(setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_OP")
                (setq indx i)
                (setq totalList nil)
                (setq counter 1)
                (setq comeFromParser nil)
                (loop while (not (eq counter 0)) do (incf i)
                    (if (string/= (nth i strToken) "OP_OP")
                        (when (string= (nth i strToken) "OP_CP")(decf counter 1))
                        (incf counter 1)))
            	(setq lst (list (subseq chars indx (+ i 1))))
                (setq totalList(append totalList lst))
            	(setq lst (list (subseq strToken indx (+ i 1))))
                (setq totalList(append totalList lst))
                (setq comeFromParser (parser totalList))
                (if (not(integerp comeFromParser))
                	(setq SyntxErr t)
                    (setq SyntxErr nil))
                (if (not SyntxErr) 
                    (setq numSum (+ numSum comeFromParser))
                	(progn
                    (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                    (return-from parser "error"))))
            (when (string= (nth i strToken) "OP_CP") (setq SyntxErr nil))
        (when (eq SyntxErr t) (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error")))
        (setq result numSum)))
    (let 
    ((numSum 0) 
    (SyntxErr t))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "OP_MINUS"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1) do
            (when (string= (nth i strToken) "VALUE")
                (if (not(eq i 2))
                	(setq numSum (- numSum (parse-integer (nth i chars))))
                	(setq numSum (parse-integer (nth i chars))))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_OP")
	            (setq indx i)
	            (setq totalList nil)
	            (setq counter 1)
	            (setq comeFromParser nil)
	            (loop while (not (eq counter 0)) do (incf i)
	                (if (string/= (nth i strToken) "OP_OP")
	                    (when (string= (nth i strToken) "OP_CP")(decf counter))
	                    (incf counter)))
	            (setq lst (list (subseq chars indx (+ i 1))))
	            (setq totalList(append totalList lst))
	            (setq lst (list (subseq strToken indx (+ i 1))))
	            (setq totalList(append totalList lst))  
	            (setq comeFromParser (parser totalList))
	            (if (not(integerp comeFromParser))
	            	(setq SyntxErr t)
	                (setq SyntxErr nil))
	            (if (not SyntxErr) 
	                (if (not(eq indx 2))
	                	(setq numSum (- numSum comeFromParser))
	                    (setq numSum comeFromParser))
	            	(progn
	                (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
	                (return-from parser "error"))))
        (when (eq SyntxErr t)(print"SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error")))
        (setq result numSum)))
    (let 
    ((numSum 0) 
    (SyntxErr t))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "OP_DIV"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1) do
            (when (string= (nth i strToken) "VALUE")
                (if (not(eq i 2))
                	(setq numSum (/ numSum (parse-integer (nth i chars))))
                    (setq numSum (parse-integer (nth i chars))))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_OP")
            (setq indx i)
            (setq totalList nil)
            (setq counter 1)
            (setq comeFromParser nil)
            (loop while (not (eq counter 0))do (incf i)
                (if (string/= (nth i strToken) "OP_OP")
                    (when (string= (nth i strToken) "OP_CP")(decf counter))
                    (incf counter)))
            (setq lst (list (subseq chars indx (+ i 1))))
            (setq totalList(append totalList lst))
            (setq lst (list (subseq strToken indx (+ i 1))))
            (setq totalList(append totalList lst))  
            (setq comeFromParser (parser totalList))
            (if (not(integerp comeFromParser))
            	(setq SyntxErr t)
                (setq SyntxErr nil))
            (if (not SyntxErr) 
                (if (not(eq indx 2))
                	(setq numSum (/ numSum comeFromParser))
                    (setq numSum comeFromParser))
            	(progn
                (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                (return-from parser "error"))))
        (when (eq SyntxErr t) (print "SYNTAX_ERROR")(terpri(princ "------------------------------------")(terpri) )(return-from parser "error")))
        (setq result numSum)))
    (let 
    ((numSum 0) 
    (SyntxErr t))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "OP_MULT"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1)do
            (when (string= (nth i strToken) "VALUE")
                (if (not(eq i 2))
                	(setq numSum (* numSum (parse-integer (nth i chars))))
                    (setq numSum (parse-integer (nth i chars))))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_OP")
            (setq indx i)
            (setq totalList nil)
            (setq counter 1)
            (setq comeFromParser nil)
            (loop while (not (eq counter 0))do (incf i)
                (if (string/= (nth i strToken) "OP_OP")
                    (when (string= (nth i strToken) "OP_CP")(decf counter))
                    (incf counter)))
            (setq lst (list (subseq chars indx (+ i 1))))
            (setq totalList(append totalList lst))
            (setq lst (list (subseq strToken indx (+ i 1))))
            (setq totalList(append totalList lst))  
            (setq comeFromParser (parser totalList))
            (if (not(integerp comeFromParser))
            	(setq SyntxErr t)
                (setq SyntxErr nil))
            (if (not SyntxErr) 
                (if (not(eq indx 2))
                	(setq numSum (* numSum comeFromParser))
                    (setq numSum comeFromParser))
            	(progn
                (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                (return-from parser "error"))))
        (when (eq SyntxErr t) (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error")))
        (setq result numSum)))
    (let 
    ((numSum 0) 
    (SyntxErr t))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "OP_DBLMULT"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1) do
            (when (string= (nth i strToken) "VALUE")
                (if (not(eq i 2))
                	(setq numSum (expt numSum (parse-integer (nth i chars))))
                    (setq numSum (parse-integer (nth i chars))))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_OP")
                (setq indx i)
                (setq totalList nil)
                (setq counter 1)
                (setq comeFromParser nil)
                (loop while (not (eq counter 0)) do (incf i)
                    (if (string/= (nth i strToken) "OP_OP")
                        (when (string= (nth i strToken) "OP_CP")(decf counter))
                        (incf counter)))
                (setq lst (list (subseq chars indx (+ i 1))))
                (setq totalList(append totalList lst))
                (setq lst (list (subseq strToken indx (+ i 1))))
                (setq totalList(append totalList lst))  
                (setq comeFromParser (parser totalList))
                (if (not(integerp comeFromParser))
                	(setq SyntxErr t)
                    (setq SyntxErr nil))
                (if (not SyntxErr) 
                    (if (not(eq indx 2))
                    	(setq numSum (expt numSum comeFromParser))
                        (setq numSum comeFromParser))
                    (progn
                    (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                    (return-from parser "error"))))
        (when (eq SyntxErr t) (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error")))
        (setq result numSum)))
    (let 
    ((boolSum ) 
    (SyntxErr t))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_AND"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1) do
            (when (or (string= (nth i strToken) "KW_TRUE") 
            		  (string= (nth i strToken) "KW_NIL") 
            		  (string= (nth i strToken) "KW_FALSE"))
                (if (not(eq i 2))
                	(if (string/= (nth i strToken) "KW_TRUE")
                    	(setq boolSum (and boolSum nil))
                        (setq boolSum (and boolSum t)))
                    (if (string/= (nth i strToken) "KW_TRUE")
                    	(setq boolSum nil)
                        (setq boolSum t)))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_OP")
                (setq indx i)
                (setq totalList nil)
                (setq counter 1)
                (setq comeFromParser nil)
                (loop while (not (eq counter 0)) do (incf i)
                    (if (string= (nth i strToken) "OP_OP")
                        (incf counter)
                        (when (string= (nth i strToken) "OP_CP")(decf counter))))
            	(setq lst (list (subseq chars indx (+ i 1))))
                (setq totalList(append totalList lst))
                (setq lst (list (subseq strToken indx (+ i 1))))
                (setq totalList(append totalList lst))  
                (setq comeFromParser (parser totalList))
                (if (not(typep comeFromParser 'boolean))
                    (setq SyntxErr nil)
                	(setq SyntxErr t))
                (if (not SyntxErr) 
                    (if (not(eq indx 2))
                    	(setq boolSum (and boolSum comeFromParser))
                        (setq boolSum comeFromParser))
                    (progn
                    (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                    (return-from parser "error"))))
        (when (eq SyntxErr t) (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (princ "------------------------------------")(terpri)  (return-from parser "error")))
        (setq result boolSum)))
    (let 
    ((boolSum ) 
    (SyntxErr t))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_OR"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1)do
            (when (or (string= (nth i strToken) "KW_TRUE") 
            		  (string= (nth i strToken) "KW_NIL") 
            		  (string= (nth i strToken) "KW_FALSE"))
                (if (not(eq i 2))
                    (if (string/= (nth i strToken) "KW_TRUE")
                        (setq boolSum (or boolSum t))
                    	(setq boolSum (or boolSum nil)))
                	(if (string/= (nth i strToken) "KW_TRUE")
                    	(setq boolSum nil)
                        (setq boolSum t)))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_OP")
                (setq indx i)
                (setq totalList lst)
                (setq counter 1)
                (setq comeFromParser lst)
                (loop while (not (eq counter 0)) do (incf i)
                    (if (string/= (nth i strToken) "OP_OP")
                        (if (string= (nth i strToken) "OP_CP")
                            (decf counter))
                        (incf counter)))
                (setq lst (list (subseq chars indx (+ i 1))))
                (setq totalList(append totalList lst))
                (setq lst (list (subseq strToken indx (+ i 1))))
                (setq totalList(append totalList lst))  
                (setq comeFromParser (parser totalList))
                (if (not(typep comeFromParser 'boolean))
                	(setq SyntxErr t)
                    (setq SyntxErr nil))
                (if (not SyntxErr) 
                    (if (not(eq indx 2))
                    	(setq boolSum (or boolSum comeFromParser))
                        (setq boolSum comeFromParser))
                	(progn
                    (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                    (return-from parser "error"))))
        (when (eq SyntxErr t)(print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error")))
        (setq result boolSum)))
    (let 
    ((boolSum ) 
    (SyntxErr t))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_NOT"))
        (setq errorFlag nil)
        (when (or (string= (nth 2 strToken) "KW_TRUE") 
        		  (string= (nth 2 strToken) "KW_NIL") 
        		  (string= (nth 2 strToken) "KW_FALSE"))
            (if (string/= (nth 2 strToken) "KW_TRUE")
            	(setq boolSum t)
                (setq boolSum nil))
            (setq SyntxErr nil))
        (when (string= (nth 2 strToken) "OP_OP")
            (setq indx 2)
            (setq i 2)
            (setq totalList nil)
            (setq  counter 1)
            (setq comeFromParser nil)
            (loop while (not (eq counter 0)) do(incf i)
                (if (string= (nth i strToken) "OP_OP")
                    (incf counter)
                    (when (string= (nth i strToken) "OP_CP")(decf counter))))
            (setq lst list (subseq chars indx (+ i 1)))
            (setq totalList(append totalList lst))
            (setq lst list (list (subseq strToken indx (+ i 1))))
            (setq totalList(append totalList lst))  
            (setq comeFromParser (parser totalList))
            (if (not(typep comeFromParser 'boolean))
            	(setq SyntxErr t)
                (setq SyntxErr nil))
            (if (not SyntxErr) 
                (setq boolSum (not comeFromParser))
                (progn
                    (print "SYNTAX_ERROR")(terpri)
                    (return-from parser "error"))))
        (when (eq (nth 2 strToken) "OP_CP")(setq SyntxErr nil))
        (when (eq SyntxErr t) (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri)  (return-from parser "error"))
        (setq result boolSum)))
    (let 
    ((boolSum ) 
    (SyntxErr t) 
    (counterFlag 0))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_EQUAL"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1)do
            (when (or (string= (nth i strToken) "KW_TRUE") 
            		  (string= (nth i strToken) "KW_NIL") 
            		  (string= (nth i strToken) "KW_FALSE"))
                (incf counterFlag)
                (if (not(eq i 2))
                    (if (string/= (nth i strToken) "KW_TRUE")
                    	(setq boolSum (eq boolSum nil))
                        (setq boolSum (eq boolSum t)))
                    (if (string/= (nth i strToken) "KW_TRUE")
                        (setq boolSum nil)
                        (setq boolSum t)))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "VALUE") 
                (incf counterFlag)
                (if (not(eq i 2))
                	(setq boolSum (eq boolSum (parse-integer (nth i chars))))
                    (setq boolSum (parse-integer (nth i chars))))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_OP") (incf counterFlag)
                (setq indx i)
                (setq totalList nil)
                (setq counter 1)
                (setq comeFromParser nil)
                (loop while (not (eq counter 0)) do (incf i)
                    (if (string/= (nth i strToken) "OP_OP")
                        (when (string= (nth i strToken) "OP_CP")(decf counter))
                        (incf counter)))
                (setq lst (list (subseq chars indx (+ i 1))))
                (setq totalList(append totalList lst))
                (setq lst (list (subseq strToken indx (+ i 1))))
                (setq totalList(append totalList lst))  
                (setq comeFromParser (parser totalList))
                (if (not(or (eq boolSum nil) 
                		(and (typep comeFromParser 'boolean) 
                			 (typep boolSum 'boolean)) 
                		(and (integerp comeFromParser) 
                			 (integerp boolSum ))))
                	(progn
                    (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                    (return-from parser "error"))
                	(progn
                    (if (not(eq indx 2))
                    	(setq boolSum (eq boolSum comeFromParser))
                        (setq boolSum comeFromParser))
                    (setq SyntxErr nil))))
        (when (or (eq SyntxErr t) (> counterFlag 2))(print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error")))
        (setq result boolSum)))
    (let 
    ((boolSum ) 
    (SyntxErr t) 
    (counterFlag 0))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_LESS"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1)do
            (when (string= (nth i strToken) "VALUE") (incf counterFlag)
                (if (not(eq i 2))
                	(setq boolSum (>=(parse-integer (nth i chars)) boolSum ))
                    (setq boolSum (parse-integer (nth i chars))))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_OP") (incf counterFlag)
                (setq indx i)
                (setq totalList nil)
                (setq counter 1)
                (setq comeFromParser nil)
                    (loop while (not (eq counter 0))do(incf i)
                        (if (string/= (nth i strToken) "OP_OP")
                            (when (string= (nth i strToken) "OP_CP")(decf counter))
                            (incf counter)))
                    (setq lst (list (subseq chars indx (+ i 1))))
                    (setq totalList(append totalList lst))
                    (setq lst (list (subseq strToken indx (+ i 1))))
                    (setq totalList(append totalList lst))  
                    (setq comeFromParser (parser totalList))
                    (if (not(integerp comeFromParser))
                    	(setq SyntxErr t)
                        (setq SyntxErr nil))
                    (if (not SyntxErr) 
                        (if (not(eq indx 2))
                        	(setq boolSum (>= comeFromParser  boolSum))
                            (setq boolSum comeFromParser))
                    	(progn
                        (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                        (return-from parser "error"))))
        (when (or (eq SyntxErr t)(> counterFlag 2) )(print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error")))
        (if (not(eq counterFlag 1))
        	(setq result boolSum)
            (setq result t))))
    (setq listSum nil) 
    (setq SyntxErr t) 
    (setq startindx nil)
    (when (or (string= (nth 0 strToken) "OP_LISTOP") 
    		  (and (string= (nth 0 strToken) "OP_OP") 
    		  	   (string= (nth 1 strToken) "KW_LIST")))
        (setq errorFlag nil)
        (if (string/= (nth 0 strToken) "OP_LISTOP")
        	(setq startindx 2)
            (setq startindx 1))
        (loop for i from startindx to (- (length chars) 1)do
            (setq SyntxErr t)
            (when (string= (nth i strToken) "VALUE") 
                (setq lst (list (parse-integer (nth i chars))))
                (setq listSum (append listSum lst))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_CP")(setq SyntxErr nil))
            (when (eq SyntxErr t) (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri)  (return-from parser "error")))
        (setq result listSum))
    (setq listSum nil) 
    (setq SyntxErr t)
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "IDENTIFIER") 
    		   (or (string= (nth 2 strToken) "OP_OP") 
    		   	   (string= (nth 2 strToken) "OP_LISTOP")))
        (setq errorFlag nil)
        (format t "IDENTIFIER:~A~%" (nth 1 chars))
        (loop for i from 2 to (- (length chars) 1)do
            (when (or (and (string= (nth i strToken) "OP_OP") 
            			   (string= (nth (+ i 1) strToken) "KW_CONCAT")) 
                  	  (and (string= (nth i strToken) "OP_OP") 
                  		   (string= (nth (+ i 1) strToken) "KW_APPEND"))
                  (string= (nth i strToken) "OP_LISTOP"))
            (setq indx i)
            (setq totalList nil)
            (setq counter 1)
            (setq comeFromParser nil)
            (loop while (not (eq counter 0))do(incf i)
                (if (not(or (string= (nth i strToken) "OP_OP") (string= (nth i strToken) "OP_LISTOP")))
                    (when (string= (nth i strToken) "OP_CP")(decf counter))
                    (incf counter)))
            (setq lst (list (subseq chars indx (+ i 1))))
            (setq totalList(append totalList lst))
            (setq lst (list (subseq strToken indx (+ i 1))))
            (setq totalList(append totalList lst))  
            (setq comeFromParser (parser totalList))
                (if (not(listp comeFromParser))
                	(setq SyntxErr t)
                    (setq SyntxErr nil))
                (if (not SyntxErr) 
                    (setq listSum (append listSum comeFromParser))
                	(progn
                    (print "SYNTAX_ERROR")(terpri)
                    (return-from parser "error")))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_CP")(setq SyntxErr nil))
            (when (eq SyntxErr t) (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error")))
        (setq result listSum))
    (setq  listSum nil) 
    (setq SyntxErr t)
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "IDENTIFIER") 
    		   (not (or (string= (nth 2 strToken) "OP_OP") 
    		   		    (string= (nth 2 strToken) "OP_LISTOP"))))
        (setq errorFlag nil)
        (loop for i from 1 to (- (length chars) 1) do
            (setq SyntxErr t)
            (when (string= (nth i strToken) "IDENTIFIER") 
            	(setq lst (list (nth i chars)))
                (setq listSum (append listSum lst))
                (setq SyntxErr nil))
            (when (string= (nth i strToken) "OP_CP")(setq SyntxErr nil))
            (when (eq SyntxErr t) (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error")))
        (setq result listSum))
    (setq listSum nil) 
    (setq SyntxErr t) 
    (setq counterFlag 0)
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_CONCAT"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1) do
            (when (or (and (string= (nth i strToken) "OP_OP") 
                  	   	   (string= (nth (+ i 1) strToken) "KW_APPEND"))
                  	  (and (string= (nth i strToken) "OP_OP") 
            			   (string= (nth (+ i 1) strToken) "KW_CONCAT"))
            		  (string= (nth i strToken) "OP_LISTOP"))
                (incf counterFlag)
                (setq indx i)
                (setq totalList nil)
                (setq counter 1)
                (setq comeFromParser nil)
                (loop while (not (eq counter 0))do(incf i)
                    (if (not(or (string= (nth i strToken) "OP_OP") 
                    		(string= (nth i strToken) "OP_LISTOP")))
                        (when (string= (nth i strToken) "OP_CP")(decf counter))
                        (incf counter)))
                (setq lst (list (subseq chars indx (+ i 1))))
                (setq totalList(append totalList lst))
                (setq lst (list (subseq strToken indx (+ i 1))))
                (setq totalList(append totalList lst))  
                (setq comeFromParser (parser totalList))
                (if (not(listp comeFromParser))
               	 	(setq SyntxErr t)
                    (setq SyntxErr nil))
                (if (not SyntxErr) 
                    (setq listSum (append listSum comeFromParser))
                	(progn
                    (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                    (return-from parser "error")))
                (setq SyntxErr nil))
            (when (or (eq SyntxErr t) (> counterFlag 2))
                (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                (return-from parser "error")))
        (if (not(eq counterFlag 1))
        	(setq result listSum)
            (setq result t)))   
    (let 
    ((listSum (list )) 
    (SyntxErr t) 
    (explistFlag 0) 
    (expiFlag 0) 
    (indx1 -1) 
    (indx2 -1) )
    (when (and (string= (nth 0 strToken) "OP_OP") 	
    		   (string= (nth 1 strToken) "KW_APPEND"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1)  do
            (when (and (string= (nth i strToken) "OP_OP") 
            		   (not (or (and (string= (nth i strToken) "OP_OP") 
                  					 (string= (nth (+ i 1) strToken) "KW_APPEND"))
            		   			(and (string= (nth i strToken) "OP_OP") 
            		   			     (string= (nth (+ i 1) strToken) "KW_CONCAT")) 
                  				(string= (nth i strToken) "OP_LISTOP"))))
            (setq indx1 i)
            (incf expiFlag)
            (setq indx i)
            (setq totalList nil)
            (setq counter 1)
            (setq comeFromParser nil)
            (loop while (not (eq counter 0)) do (incf i)
                (if (not(string= (nth i strToken) "OP_OP"))
                    (if (string= (nth i strToken) "OP_CP")
                        (decf counter))
                    (incf counter)))
            (setq lst (list (subseq chars indx (+ i 1))))
            (setq totalList(append totalList lst))
            (setq lst (list (subseq strToken indx (+ i 1))))
            (setq totalList(append totalList lst))  
            (setq comeFromParser (parser totalList))
            (if (not(integerp comeFromParser))
            	(setq SyntxErr t)
                (setq SyntxErr nil))
            (if (not SyntxErr) 
                (setq listSum (append listSum (list comeFromParser)))
            	(progn
                (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                (return-from parser "error")))
            (setq SyntxErr nil))
            (when (string= (nth i strToken) "VALUE")
                (setq indx1 i)
                (incf expiFlag 1)
                (setq SyntxErr nil)
                (setq lst (list (parse-integer (nth i chars))))
                (setq listSum (append listSum lst)))
            (when (or (and (string= (nth i strToken) "OP_OP") 
                  	  	   (string= (nth (+ i 1) strToken) "KW_APPEND"))
            		  (and (string= (nth i strToken) "OP_OP") 
            			   (string= (nth (+ i 1) strToken) "KW_CONCAT")) 
                  	  (string= (nth i strToken) "OP_LISTOP"))
                (incf explistFlag)
                (setq indx2 i)
                (setq indx i)
				(setq totalList nil)
				(setq counter 1)
				(setq comeFromParser nil)
                (loop while (not (eq counter 0))do(incf i)
                    (if (not(or (string= (nth i strToken) "OP_OP") 
                    		(string= (nth i strToken) "OP_LISTOP")))
                        (when (string= (nth i strToken) "OP_CP") (decf counter))
                        (incf counter)))
                (setq lst (list (subseq chars indx (+ i 1))))
                (setq totalList(append totalList lst))
                (setq lst (list (subseq strToken indx (+ i 1))))
                (setq totalList(append totalList lst))  
                (setq comeFromParser (parser totalList))
                (if (not(listp comeFromParser))
                	(setq SyntxErr t)
                    (setq SyntxErr nil))
                (if (not SyntxErr) 
                    (setq listSum (append listSum comeFromParser))
                	(progn
                    (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                    (return-from parser "error")))
                (setq SyntxErr nil))
            (when (or (eq SyntxErr t) (> expiFlag 1) (> explistFlag 1))
                (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                (return-from parser "error")))
        (when (or (not (eq expiFlag 1)) 
        		  (not (eq explistFlag 1)) 
        		  (<= indx2 indx1))
            (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
            (return-from parser "error"))
        (setq result listSum)))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_EXIT") 
    		   (string= (nth 2 strToken) "OP_CP") )
        (exit)(setq errorFlag nil))
    (when (and (string= (nth 0 strToken) "OP_OP") (string= (nth 1 strToken) "KW_LOAD") (string= (nth 2 strToken) "OP_OC")(string= (nth 3 strToken) "IDENTIFIER")(string= (nth 4 strToken) "OP_CC")(string= (nth 5 strToken) "OP_CP") )
        (setq result (nth 3 chars))
        (setq errorFlag nil))
    (let 
    ((idSum "") 
    (SyntxErrCountID 0) 
    (SyntxErrCountLst 0) 
    (idFindindx 0) 
    (explistFindindx 0))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_DEFFUN") 
    		   (string= (nth 2 strToken) "IDENTIFIER"))
        (setq errorFlag nil)
        (setq idSum (string-upcase (nth 2 chars)))
        (loop for i from 3 to (- (length chars) 1) do
            (when (and (string= (nth i strToken) "OP_OP") 
            		   (string= (nth (+ 1 i) strToken) "IDENTIFIER"))
                (setq idFindindx i)
                (incf SyntxErrCountID))
            (when (or (and (string= (nth i strToken) "OP_OP") 
            			   (string= (nth (+ i 1) strToken) "KW_APPEND"))
            		  (and (string= (nth i strToken) "OP_OP") 
            		  	   (string= (nth (+ i 1) strToken) "KW_CONCAT")) 
                  	  (string= (nth i strToken) "OP_LISTOP"))
                (setq explistFindindx i)
                (incf SyntxErrCountLst)
                (setq indx i)
                (setq totalList nil)
                (setq counter 1)
                (setq comeFromParser nil)
                    (loop while (not (eq counter 0))do(incf i)
                        (if (not(or (string= (nth i strToken) "OP_OP") 
                        		(string= (nth i strToken) "OP_LISTOP")))
                            (when (string= (nth i strToken) "OP_CP")(decf counter))
                            (incf counter)))
                    (setq totalList(append totalList (list (subseq chars indx (+ i 1)))))
                    (setq totalList(append totalList (list (subseq strToken indx (+ i 1)))))  
                    (setq comeFromParser (parser totalList))
                    (if (not(listp comeFromParser))
                    	(setq SyntxErr t)
                        (setq SyntxErr nil))
                    (when (eq SyntxErr t)
                        (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                        (return-from parser "error"))))
        (when (or (> idFindindx explistFindindx)
        		  (> SyntxErrCountLst 1)
        		  (eq idFindindx 0)  
        		  (> SyntxErrCountID 1) 
        		  (eq explistFindindx 0))
            (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error"))
        (setq result idSum)))
    (let 
    ((boolSum ) 
    (listSum ) 
    (SyntxErr t) 
    (explist1 nil) 
    (explist2 nil) 
    (explistFlag 0))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    	  (or  (string= (nth 1 strToken) "KW_IF") 
    	  	   (string= (nth 1 strToken) "KW_WHILE")))
        (setq errorFlag nil)
        (when (or (string= (nth 2 strToken) "KW_TRUE") 
        		  (string= (nth 2 strToken) "KW_NIL") 
        		  (string= (nth 2 strToken) "KW_FALSE"))
            (if (string/= (nth 2 strToken) "KW_TRUE")
            	(setq boolSum nil)
            	(setq boolSum t)))
        (when (string= (nth 2 strToken) "OP_OP")
            (setq indx 2)
            (setq i 2)
            (setq totalList nil)
            (setq counter 1)
            (setq comeFromParser nil)
            (loop while (not (eq counter 0)) do (incf i)
                (if (string/= (nth i strToken) "OP_OP")
                    (if (string= (nth i strToken) "OP_CP")(decf counter))
                    (incf counter)))
            (setq lst (list (subseq chars indx (+ i 1))))
            (setq totalList(append totalList lst))
            (setq lst (list (subseq strToken indx (+ i 1))))
            (setq totalList(append totalList lst))  
            (setq comeFromParser (parser totalList))
            (if (not(typep comeFromParser 'boolean))
            	(setq SyntxErr t)
                (setq SyntxErr nil))
            (if (not SyntxErr) 
                (if (not(eq indx 2))
                	(setq boolSum (or boolSum comeFromParser))
                    (setq boolSum comeFromParser))
            	(progn
                (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                (return-from parser "error"))))
        (when (not (or (string= (nth 2 strToken) "OP_OP") 
        			   (string= (nth 2 strToken) "KW_TRUE") 
        			   (string= (nth 2 strToken) "KW_NIL") 
        			   (string= (nth 2 strToken) "KW_FALSE")))
            (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
            (return-from parser "error"))
        (loop for i from 2 to (- (length chars) 1) do
            (when (or (and (string= (nth i strToken) "OP_OP") 
            			   (string= (nth (+ i 1) strToken) "KW_CONCAT")) 
                  	  (and (string= (nth i strToken) "OP_OP") 
                  	  	   (string= (nth (+ i 1) strToken) "KW_APPEND"))
                  (string= (nth i strToken) "OP_LISTOP"))
                (incf explistFlag)
                (setq indx i)
                (setq totalList nil)
                (setq counter 1)
                (setq comeFromParser nil)
                (loop while (not (eq counter 0))do(incf i)
                    (if (not(or (string= (nth i strToken) "OP_OP") 
                    		(string= (nth i strToken) "OP_LISTOP")))
                        (when (string= (nth i strToken) "OP_CP")(decf counter))
                        (incf counter)))
                (setq lst (list (subseq chars indx (+ i 1))))
                (setq totalList(append totalList lst))
                (setq lst (list (subseq strToken indx (+ i 1))))
                (setq totalList(append totalList lst))  
                (setq comeFromParser (parser totalList))
                (if (not(listp comeFromParser))
                	(setq SyntxErr t)
                    (setq SyntxErr nil))
                (if (not SyntxErr)
                    (if (not(eq explistFlag 1))
                        (when (eq explistFlag 2)(setq explist2 (append listSum comeFromParser)))
                        (setq explist1 (append listSum comeFromParser)))
               		(progn
                    (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                    (return-from parser "error")))))
        (when (or (> explistFlag 2)(eq explistFlag 0))(print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error"))
        (if (eq boolSum t)
        	(setq result explist2)
        	(setq result explist1))))
    (let 
    ((numSum )
    (expCounter 0))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_DISP"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1) do
            (when (and  (string= (nth i strToken) "OP_OC")
                		(string= (nth (+ 1 i) strToken) "IDENTIFIER")
                		(string= (nth (+ 2 i) strToken) "OP_CC")
                		(incf expCounter 1)
                		(setq numSum (nth (+ 1 i) chars))))
            (when (or (string= (nth i strToken) "OP_OP") 
            		  (string= (nth i strToken) "OP_LISTOP"))
                (incf expCounter)
                (setq indx i)
                (setq totalList nil)
                (setq counter 1)
                (loop while (not (eq counter 0)) do (incf i)
                    (if (not(or (string= (nth i strToken) "OP_OP") 
                    			(string= (nth i strToken) "OP_LISTOP")))
                        (when (string= (nth i strToken) "OP_CP")(decf counter))
                        (incf counter)))
                (setq lst (list (subseq chars indx (+ i 1))))
                (setq totalList(append totalList lst))
                (setq lst (list (subseq strToken indx (+ i 1))))
                (setq totalList(append totalList lst))  
                (setq numSum (parser totalList)))
            (when (or (string= (nth i strToken) "KW_TRUE") 
            		  (string= (nth i strToken) "KW_NIL") 
            		  (string= (nth i strToken) "KW_FALSE"))
                (incf expCounter)
                (if (string= (nth i strToken) "KW_TRUE")
                    (setq numSum t)
                	(setq numSum nil)))
            (when (string= (nth i strToken) "VALUE")
                (incf expCounter 1)
                (setq numSum (parse-integer (nth i chars)))))
        (when (> expCounter 1)(print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error"))  
        (setq result numSum)))
    (let 
    ((numSum 0)
    (expCounter 0))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_DISP"))
        (setq errorFlag nil)
        (loop for i from 2 to (- (length chars) 1) do
        (when (and (string= (nth i strToken) "OP_OC")
            	   (string= (nth (+ 1 i) strToken) "IDENTIFIER")
            	   (string= (nth (+ 2 i) strToken) "OP_CC")
            	   (setq numSum (nth (+ 1 i) chars)))
            	   (incf expCounter))
        (when (or (string= (nth i strToken) "OP_OP") 
        		  (string= (nth i strToken) "OP_LISTOP"))
        (incf expCounter)
        (setq indx i)
        (setq totalList nil)
        (setq counter 1)
        (loop while (not (eq counter 0))do(incf i)
            (if (not(or (string= (nth i strToken) "OP_OP") (string= (nth i strToken) "OP_LISTOP")))
                (when (string= (nth i strToken) "OP_CP")(decf counter))
                (incf counter)))
            (setq totalList(append totalList (list (subseq chars indx (+ i 1)))))
            (setq totalList(append totalList (list (subseq strToken indx (+ i 1)))))  
            (setq numSum (parser totalList)))
        (when (or (string= (nth i strToken) "KW_TRUE") 
        		  (string= (nth i strToken) "KW_NIL") 
        		  (string= (nth i strToken) "KW_FALSE"))
            (incf expCounter)
            (if (string/= (nth i strToken) "KW_TRUE")
            	(setq numSum nil)
                (setq numSum t)))
        (when (string= (nth i strToken) "VALUE") (incf expCounter)(setq numSum (parse-integer (nth i chars)))))
        (when (> expCounter 1)
            (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
            (return-from parser "error"))   
        (setq result numSum)))
    (let 
    ((listSum 0) 
    (SyntxErr t)
    (phrsCounter 0)
    (expiCounter 0)
    (explistFlag 0))
    (when (and (string= (nth 0 strToken) "OP_OP") 
    		   (string= (nth 1 strToken) "KW_FOR") 
               (string= (nth 2 strToken) "OP_OP") 
               (string= (nth 3 strToken) "IDENTIFIER"))
        (setq errorFlag nil)
        (setq i 4)
        (incf phrsCounter)
        (loop while (and (not (eq phrsCounter 0)) 
        				 (< i (- (length chars) 1))) do
            (when (string= (nth i strToken) "VALUE")(incf expiCounter)(setq SyntxErr nil))
            (if (string/= (nth i strToken) "OP_CP")
                (setq SyntxErr nil)
                (decf phrsCounter))
            (when (string= (nth i strToken) "OP_OP")
                (incf expiCounter)
                (setq indx i)
                (setq totalList nil)
                (setq counter 1)
                (setq comeFromParser nil)
                (loop while (not (eq counter 0))do(incf i)
                    (if (string/= (nth i strToken) "OP_OP")
                        (when (string= (nth i strToken) "OP_CP")(decf counter))
                        (incf counter)))
                	(setq (list (subseq chars indx (+ i 1))))
                    (setq totalList(append totalList lst))
                    (setq lst (list (subseq strToken indx (+ i 1))))
                    (setq totalList(append totalList lst))  
                    (setq comeFromParser (parser totalList))
                    (if (not(integerp comeFromParser))
                    	(setq SyntxErr t)
                        (setq SyntxErr nil))
                    (when (eq SyntxErr t)
                        (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                        (return-from parser "error"))
                (setq SyntxErr nil))
            (when (eq SyntxErr t)(print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error"))(incf i))
        (if (eq expiCounter 2)
            (when (or (equal (nth i strToken) "OP_LISTOP")
            		  (and (equal (nth i strToken) "OP_OP") 
            			   (equal (nth (+ i 1) strToken) "KW_CONCAT")) 
                  	  (and (equal (nth i strToken) "OP_OP") 
                  	  	   (equal (nth (+ i 1) strToken) "KW_APPEND")))
                (incf explistFlag)
                (setq indx i)
                (setq totalList nil) 
                (setq counter 1)
                (setq comeFromParser nil)
                (loop while (not (equal counter 0)) do (incf i)
                    (if (not(or (equal (nth i strToken) "OP_OP") 
                    			(equal (nth i strToken) "OP_LISTOP")))
                        (when (equal (nth i strToken) "OP_CP")(decf counter))
                        (incf counter)))
                (setq lst (list (subseq chars indx (+ i 1))))
                (setq totalList(append totalList lst))
                (setq lst (list (subseq strToken indx (+ i 1))))
                (setq totalList(append totalList lst))  
                (setq comeFromParser (parser totalList))
                (if (not(listp comeFromParser))
                	(setq SyntxErr t)
                    (setq SyntxErr nil))
                (if (not SyntxErr)
                    (setq listSum comeFromParser)
                	(progn
                    (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
                    (return-from parser "error"))))
            (progn
            (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
            (return-from parser "error")))
        	(when (not(and (eq explistFlag 1) 
        		  (eq i (- (length chars) 2))))
        	(progn
            (print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) 
            (return-from parser "error"))
            (setq result listSum))))
        (when (eq errorFlag t)(print "SYNTAX_ERROR")(terpri)(princ "------------------------------------")(terpri) (return-from parser "error"))result))
(defun paranthesisChecker (strList)
    (setq phrsCounter 0)
    (loop for i from 0 to (-(length strList) 1) do
        (when (or (string= (nth i strList) "(") (string= (nth i strList) "'("))(incf phrsCounter))
        (when (string= (nth i strList) ")") (when (eq phrsCounter 0)(return-from paranthesisChecker nil))(decf phrsCounter))
        (when (and (eq phrsCounter 0) (< i (- (length strList) 1)))(return-from paranthesisChecker nil)))
    (if (not(eq phrsCounter 0))
    	nil
        (return-from paranthesisChecker t)))
(defun gppinterpreter( &optional filename )
    (if (equal filename nil)
        (REPLmode)
    	(readfile filename)))
(defun main()
	(defvar DEFFUN "KW_DEFFUN")(defvar DEFVAR "KW_DEFVAR") (defvar CONCAT "KW_CONCAT") (defvar FALSE "KW_FALSE") 
	(defvar APPEND "KW_APPEND") (defvar WHILE "KW_WHILE")  (defvar EQUAL "KW_EQUAL") (defvar TRUE "KW_TRUE")(defvar DISP "KW_DISP")
	(defvar EXIT "KW_EXIT")(defvar LESS "KW_LESS")(defvar LIST "KW_LIST")(defvar AND "KW_AND")(defvar SET "KW_SET")(defvar FOR "KW_FOR")
	(defvar NL "KW_NIL")(defvar NOT "KW_NOT")(defvar OR "KW_OR") (defvar IF "KW_IF")(defvar LOAD "KW_LOAD")
	(defvar DBLMULT "OP_DBLMULT") (defvar PLUS "OP_PLUS") (defvar MINUS "OP_MINUS") (defvar DIV "OP_DIV") (defvar MULT "OP_MULT")
	(defvar OP "OP_OP") (defvar CP "OP_CP")(defvar OC "OP_OC")(defvar CC "OP_CC")(defvar COMMA "OP_COMMA")(defvar LISTOP "OP_LISTOP")
	(defvar VALUE "VALUE") (defvar COMMENT "COMMENT") (defvar IDENTIFIER "IDENTIFIER")
	(setq filename (car *args*))
	(if (string= nil filename)
		(progn 
		(princ "Start writing your codes. Empty string will terminate the REPL mode" )(terpri)
        (princ "--------------------------------------------------------------------" )(terpri)
		(gppinterpreter))
		(gppinterpreter filename))
)
(main)


